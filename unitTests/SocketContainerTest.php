<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-15 at 10:11:41.
 */

include_once '../source/SocketContainer.php';
include_once '../source/SocketHandler.php';
class SocketContainerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var SocketContainer
     */
    protected $socketContainer;
    protected $socketHandler;
    protected $socket;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->socket           = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
        $this->socketContainer  = socketContainer();
        $this->socketHandler    = new SocketHandler($this->socket);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers SocketContainer::getInstance
     */
    public function testGetInstance()
    {
        /**
         * Makes sure we are getting the correct type
         */
        $this->assertInstanceOf('SocketContainer', $this->socketContainer->getInstance());
    }

    /**
     * @covers SocketContainer::addHandler
     */
    public function testAddHandlerAlreadyAdded()
    {

        /** SocketHandler is already added and should thus
         * return false, we're not adding the same SocketHandler twice */
        $this->assertFalse($this->socketContainer->addHandler($this->socketHandler));
    }

    /**
     * @covers SocketContainer::addHandler
     *
     * Makes sure addHandler doesnt accept random
     * data
     */
    public function testAddHandlerNoInstance()
    {
        $this->assertFalse($this->socketContainer->addHandler("poop"));

    }
    /**
     * @covers SocketContainer::removeHandler
     */
    public function testRemoveHandler()
    {
        $this->assertTrue($this->socketContainer->removeHandler($this->socketHandler));
    }

    /**
     * @covers SocketContainer::removeHandler
     */

    public function testRemoveHandlerAlreadyRemoved()
    {
        $this->socketContainer->removeHandler($this->socketHandler);
        $this->assertFalse($this->socketContainer->removeHandler($this->socketHandler));
    }
    /**
     * @covers SocketContainer::getReadSockets
     */
    public function testGetReadSockets()
    {
        /**
         * Asserts that return value is in fact
         * an array
         */

        $this->assertTrue(is_array($this->socketContainer->getReadSockets()));
    }

    /**
     * @covers SocketContainer::getWriteSockets
     */
    public function testGetWriteSockets()
    {
        $this->assertTrue(is_array($this->socketContainer->getWriteSockets()));
    }

    /**
     * @covers SocketContainer::getHandler
     */
    public function testGetHandler()
    {
        $this->assertInstanceOf('SocketHandler', $this->socketContainer->getHandler($this->socket));
    }

}
